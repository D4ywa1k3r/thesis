This analyzing program will scan a Docker image for embedded secrets. A data-structure containing the secret(s) will be printed into the stdout buffer.

Enter an image_name
if image exist
	image =	pull image(image_name)
	meta  = image.history()
	
	action_dict = {
        "ADD": False,
        "COPY": False,
        "openssl": False,
        "wget": False,
        "git clone": False,
        "ssh-keygen": False,
    }
	scan_necessary = contains_key_actions(meta)

	if scan_necessary:
		target_dirs = empty
		
		for target in fetch_direct_copy_targets():
			if target use relative path:
				examine WORKDIR
				target = WORKDIR + target
            target_dirs.add(target)

        for target in fetch_indirect_copy_targets():
			if target use relative path:
				examine WORKDIR
				target = WORKDIR + target
            target_dirs.add(target)
		
		remove_overlay_dirs()
        create_overlay_dirs()
        lower_chain = get_lower_directories()
		mount_overlay(lower_chain)
		
		for target in targets:
			if target is root:
				targets_list = root level standard deviations
				for final_target in targets_list:
					scan_for_rsa_pk(overlay_path + final_target)
					scan_for_aws_token(overlay_path + final_target)
			else:
				scan_for_rsa_pk(overlay_path + final_target)
				scan_for_aws_token(overlay_path + final_target)

		if secrets found
			print secrets	
		else
			return 0			
	else
		return 0
else
	initialize termination process